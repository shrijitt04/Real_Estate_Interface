1. Singleton Pattern
Example: EmailService is implemented as a singleton.
Purpose: Ensures a single instance of EmailService is used throughout the application, promoting consistency, centralized configuration, and efficient resource usage.
Benefits:
Thread safety.
Reduced resource consumption.
Centralized control for easier debugging and management.


2. Factory Pattern
Example: PropertyCardFactory is used to create property cards for views like ResidentialView, CommercialView, and IndustrialView.
Purpose: Centralizes the creation logic for property cards, reducing code duplication and ensuring consistency across views.
Benefits:
Reusability of the card creation logic.
Consistent design across views.
Easier maintainability as changes to the card design are made in one place.

3. Builder Pattern
Example: PropertyBuilder is used to construct Property objects in a modular and readable way.
Purpose: Simplifies the creation of complex objects by chaining methods, improving code readability and maintainability.
Benefits:
Cleaner and more modular code.
Easier to understand and maintain object creation logic.

4. Iterator Pattern
Example: PropertyIterator and PropertyCollection are used in views likek ResidentialView, CommercialView, and IndustrialView.
Purpose: Decouples the iteration logic from the views, making the code cleaner and more focused on UI concerns.
Benefits:
Decoupling of iteration logic from data structure.
Reusability of the iterator across multiple views.
Easier maintainability and flexibility for changes in iteration logic.


SINGLETON PATTERN 
Before (Without Singleton Pattern):
Instantiation:

The EmailService was likely instantiated directly or injected as a dependency using Spring's @Autowired annotation.
Each view (IndustrialView, ResidentialView, etc.) might have had its own instance of EmailService.
Resource Usage:

Multiple instances of EmailService could have been created, leading to unnecessary resource usage (e.g., memory, initialization overhead).
Centralized Control:

There was no guarantee that all parts of the application were using the same instance of EmailService.
Thread Safety:

If multiple threads accessed EmailService, there could have been potential issues if the service wasn't designed to handle concurrency.
Now (With Singleton Pattern):
Instantiation:

The EmailService is now instantiated only once using the getInstance() method.
All views (IndustrialView, ResidentialView, etc.) share the same instance of EmailService.
Resource Usage:

Only one instance of EmailService is created and reused throughout the application, reducing resource consumption.
Centralized Control:

The Singleton Pattern ensures that all parts of the application use the same instance of EmailService, making it easier to manage and debug.
Thread Safety:

The getInstance() method uses a synchronized block to ensure thread-safe initialization of the EmailService.
Key Benefits of the Singleton Pattern:
Consistency:

All parts of the application use the same instance of EmailService, ensuring consistent behavior.
Efficiency:

Reduces the overhead of creating multiple instances of EmailService.
Centralized Configuration:

Any changes to the EmailService (e.g., SMTP configuration) are applied globally since there's only one instance.
Thread Safety:

The Singleton Pattern ensures that the instance is safely initialized in a multi-threaded environment.



Before Using the Factory Pattern
Property Card Creation:

The logic for creating property cards was duplicated across multiple views (ResidentialView, CommercialView, IndustrialView).
Each view had its own method to create property cards, leading to code duplication and reduced maintainability.
Code Structure:

The property card creation logic was tightly coupled with the views, making it harder to reuse or modify.
Maintainability:

Any changes to the property card design (e.g., adding a new button or modifying styles) required updates in multiple places.
Consistency:

There was a risk of inconsistency in the property card design across different views due to duplicated logic.
After Using the Factory Pattern
Property Card Creation:

The logic for creating property cards is centralized in the PropertyCardFactory class.
The factory takes a Property object and callbacks for actions like booking appointments and registering land, making it reusable and modular.
Code Structure:

The views (ResidentialView, CommercialView, IndustrialView) now delegate the property card creation to the PropertyCardFactory, reducing code duplication.
Maintainability:

Changes to the property card design can now be made in a single place (the factory), simplifying updates and reducing the risk of errors.
Consistency:

The property card design is consistent across all views since the same factory is used.
CSS Integration:

Dedicated CSS files (residential-view.css, commercial-view.css, industrial-view.css) ensure that the property cards are styled appropriately for each view.




Before Using the Builder Pattern
The Builder Pattern separates the construction of a complex object from its representation, allowing the same construction process to create different representations.

Usage - TransactionBuilder 
•	TransactionBuilder class has been used to construct or build Transactions objects.
•	This pattern simplifies the creation of complex Transactions objects with multiple optional attributes.
•	If this pattern is not used, Transactions will have to be built using a constructor with multiple parameters. This constructor call will make the code more cluttered, less readable and very difficult to understand.
•	Adding or modifying parameters would require changes to be made at multiple changes.
•	The TransactionsBuilder class now provides a fluent interface for constructing Trasactions object. It allows to chain methods to set properties which makes the code cleaner and easier to understand.

Benefits
•	Improves code readability and reduces errors.
•	Supports immutability by ensuring objects are fully constructed before use.
•	Makes object construction flexible and intuitive


Iterator Pattern 


Before Using the Iterator Pattern
Code Structure: The views (ResidentialView, CommercialView, IndustrialView) directly used a List<Property> to fetch and iterate over properties.
Iteration Logic: The iteration logic was embedded directly in the views using a forEach loop.
Drawbacks:
Tight Coupling: The views were tightly coupled to the List implementation, making it harder to change the underlying data structure.
Code Duplication: Each view had similar iteration logic, leading to redundancy.
Limited Flexibility: If the iteration logic needed to change (e.g., filtering or sorting), it would require modifying each view.
After Using the Iterator Pattern
Code Structure: The views now use a PropertyCollection class to manage properties and a PropertyIterator to traverse them.
Iteration Logic: The iteration logic is encapsulated in the PropertyIterator, making the views cleaner and more focused on UI concerns.
Benefits:
Decoupling: The views are decoupled from the underlying data structure, allowing flexibility to change it without affecting the views.
Reusability: The PropertyIterator and PropertyCollection can be reused across multiple views or components.
Maintainability: Centralizing the iteration logic in the iterator makes the code easier to maintain and extend



Here is where you are applying the mentioned principles in your code:

1. Open/Closed Principle (OCP):
Where: The HomeView class uses services like PropertyService, AppointmentService, and TransactionService to perform operations. 
These services can be extended with new functionality without modifying the HomeView class.
Explanation: The HomeView class is open for extension (e.g., adding new services or features) but closed for modification, as the logic for managing properties, appointments, and transactions is encapsulated in their respective services.
2. Separation of Concerns:
Where: The HomeView class separates UI logic (e.g., creating property cards, dialogs) from business logic (e.g., saving properties, managing appointments).
Explanation: Each layer of the application has a distinct responsibility. For example, the PropertyService handles property-related operations, while the HomeView focuses on rendering the UI and interacting with the user.
3. Single Responsibility Principle (SRP):
Where: Methods like refreshProperties, showAllAppointments, and showAllUsers in the HomeView class each have a single responsibility.
Explanation: Each method is responsible for a specific task, such as refreshing the property list or displaying appointments, ensuring the class remains modular and easier to maintain.
4. Liskov Substitution Principle (LSP):
Where: The Grid component in methods like showAllAppointments and showAllRegistrations is used with different data types (Appointment, Transactions).
Explanation: The Grid class adheres to LSP by allowing substitution with any compatible data type, ensuring that the behavior of the Grid remains consistent regardless of the data type used.